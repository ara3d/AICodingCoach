Certainly! In the example below, I will introduce a fun and simple C# class that demonstrates the use of hexadecimal numbers by drawing colored squares. Hexadecimal numbers are a base-16 number system that includes the digits 0-9 and letters A-F (representing values 10-15). They are commonly used in programming to specify colors (and in other applications where a more compact representation of binary data is helpful).

We will draw a series of squares, each filled with a color that is specified using a hexadecimal color code. The hexadecimal color code is formatted as `#RRGGBB`, where `RR` represents the red component, `GG` represents the green component, and `BB` represents the blue component of the color, each ranging from `00` to `FF` (or 0 to 255 in decimal).

Here's the code:

```csharp
using System.Windows;
using System.Windows.Media;

public class HexColorExample
{
    public HexColorExample() { }

    public void Draw(DrawingContext context)
    {
        // Set the size for our squares
        var squareSize = new Size(60, 60);

        // Define some hexadecimal color values as strings
        string[] hexColors = { "#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF", "#00FFFF" };

        // Start drawing squares at the top-left position
        Point currentPos = new Point(10, 10);

        // Iterate through the hexadecimal color values
        foreach (string hex in hexColors)
        {
            // Convert hexadecimal string to a Color structure
            Color color = (Color)ColorConverter.ConvertFromString(hex);
            // Use the color to create a SolidColorBrush
            SolidColorBrush brush = new SolidColorBrush(color);

            // Draw a filled rectangle with the solid color brush
            context.DrawRectangle(brush, null, new Rect(currentPos, squareSize));

            // Write the hexadecimal color code below the square
            FormattedText text = new FormattedText(hex,
                System.Globalization.CultureInfo.InvariantCulture,
                FlowDirection.LeftToRight,
                new Typeface("Arial"),
                20,
                Brushes.Black);

            context.DrawText(text, new Point(currentPos.X, currentPos.Y + squareSize.Height + 5));

            // Move to the position for the next square
            currentPos.X += squareSize.Width + 10;
        }
    }
}
```

Each square is drawn in a different color represented by a hexadecimal color code. We also render the color code as text below each square, so viewers can see the connection between the hex code and the color it represents. This is a simple yet effective way to visually demonstrate how hexadecimal numbers are used in a real-world context, like specifying colors in computer graphics.

This class assumes you know a little about objects like `DrawingContext`, `Color`, `SolidColorBrush`, and `Rect`. If you're just starting out, it's enough to know that each of these is used to create and display graphics in a C# application. As you study more, you'll get to know each class and its role better.