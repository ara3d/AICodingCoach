Properties in C# are members that provide a flexible mechanism to read, write or compute the values of private fields. Properties can be used as if they are public data members, but they are actually special methods called accessors. This encapsulation of get and set accessor methods allows data to be accessed easily while still providing the safety and flexibility of methods.

Here's a fun example that illustrates properties by drawing a simple house on the screen. This house will have properties such as Color and Size, and we'll change the appearance of the house by modifying these properties.

First, I'll define a `House` class with properties, and then we'll draw it using the `Draw` method.

```csharp
using System.Windows;
using System.Windows.Media;

public class House
{
    // Private fields
    private Color _color;
    private int _size;

    // Public property for house color
    public Color Color
    {
        get { return _color; }
        set { _color = value; }
    }

    // Public property for house size
    public int Size
    {
        get { return _size; }
        set { _size = value; }
    }

    // Constructor with parameters
    public House(Color color, int size)
    {
        _color = color;
        _size = size;
    }

    // A default constructor without parameters
    public House()
    {
        _color = Colors.Blue; // Default color
        _size = 100;         // Default size
    }

    // Draw method to draw the house
    public void Draw(DrawingContext drawingContext)
    {
        // Draw the body of the house
        drawingContext.DrawRectangle(new SolidColorBrush(_color), null, new Rect(50, 150, _size, _size));

        // Draw the roof of the house
        var roofPoints = new PointCollection
        {
            new Point(50, 150),
            new Point(50 + _size / 2, 100),
            new Point(50 + _size, 150)
        };
        drawingContext.DrawPolygon(new SolidColorBrush(Colors.DarkGray), null, roofPoints);
    }
}
```

To use this `House` class, the code that manages the drawing context outside our control would create an instance of `House` and then call the `Draw` method:

```csharp
House myHouse = new House();
myHouse.Draw(drawingContext);
```

When the `Draw` method is called, it would draw a blue house of a default size on the screen.

But what makes properties fun and useful is that you can easily change the color and size of the house without needing to dive into the implementation details:

```csharp
myHouse.Color = Colors.Red; // Changing the house color to red
myHouse.Size = 150;         // Changing the house size
myHouse.Draw(drawingContext);
```

This code will now draw a larger, red house because you've modified the properties. Properties provide a simple and clean way to do this without direct access to the class fields, which is a good practice in object-oriented programming.