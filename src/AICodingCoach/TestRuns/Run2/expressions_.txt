Expressions in programming are combinations of symbols (like variables, values, operators, and functions) that are evaluated by the compiler or an interpreter to produce another value. For example, a simple arithmetic expression like `5 + 3` evaluates to `8`.

Expressions can be simple, like constants or variables, or more complex, involving multiple operators and function calls. They are central to programming because they allow developers to perform calculations, manipulate data, and express logic.

In C#, expressions are strongly typed just like variables, meaning the type of the expression is known at compile time. This strong typing helps catch errors early in the development process.

Let me illustrate expressions through a C# example that draws a visual representation of basic arithmetic expressions using graphics. I'll define a `SimpleExpressionVisualizer` class for you, which you can compile with WPF and use to understand expressions graphically.

```csharp
using System;
using System.Windows;
using System.Windows.Media;

public class SimpleExpressionVisualizer
{
    public void Draw(DrawingContext drawingContext)
    {
        // Set the background color
        drawingContext.DrawRectangle(Brushes.White, null, new Rect(0, 0, 400, 400));

        // Set the text formatting
        Typeface typeface = new Typeface("Consolas");
        FormattedText text = new FormattedText("5 + 3 = 8",
            System.Globalization.CultureInfo.InvariantCulture,
            FlowDirection.LeftToRight,
            typeface, 36, Brushes.Black);

        // Calculate the position to start drawing the text
        Point textPosition = new Point(50, 50);

        // Draw 5 + 3 = 8
        drawingContext.DrawText(text, textPosition);

        // Now let's draw some visual representations of the expression "5 + 3"
        // Drawing circles to represent the numbers 5 and 3
        Brush numberBrush = Brushes.Blue;
        Pen pen = new Pen(Brushes.Black, 1);

        // Draw five circles for the number 5
        for(int i = 0; i < 5; i++)
        {
            drawingContext.DrawEllipse(numberBrush, pen, new Point(100 + i * 20, 150), 10, 10);
        }

        // Draw '+' sign
        FormattedText plusSign = new FormattedText("+",
            System.Globalization.CultureInfo.InvariantCulture,
            FlowDirection.LeftToRight,
            typeface, 36, Brushes.Black);
        drawingContext.DrawText(plusSign, new Point(210, 130));

        // Draw three circles for the number 3
        for(int i = 0; i < 3; i++)
        {
            drawingContext.DrawEllipse(numberBrush, pen, new Point(250 + i * 20, 150), 10, 10);
        }

        // Draw '=' sign
        FormattedText equalSign = new FormattedText("=",
            System.Globalization.CultureInfo.InvariantCulture,
            FlowDirection.LeftToRight,
            typeface, 36, Brushes.Black);
        drawingContext.DrawText(equalSign, new Point(310, 130));

        // Result after expression evaluation. Draw 8 circles
        for(int i = 0; i < 8; i++)
        {
            drawingContext.DrawEllipse(numberBrush, pen, new Point(100 + i * 20, 200), 10, 10);
        }
    }
}
```

In this example, the `Draw` method first sets the background color and formatting for the text to be used. It then draws the text "5 + 3 = 8", and proceeds to represent the arithmetic expression "5 + 3" using blue circles to help visualize addition. The eight circles at the bottom visualize the result of this expression, which is `8`.

To see the visualization in action, this `SimpleExpressionVisualizer` class would have to be used in a WPF application where a `DrawingContext` is available. This example is simplified to focus on using graphical representations to explain the concept of expressions in C#.