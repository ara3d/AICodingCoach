Arrays in programming are a collection of items stored at contiguous memory locations and they are used to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the index 0).

Here's a creative C# example that will demonstrate working with arrays by drawing a series of colored rectangles on a canvas, each rectangle representing an element in an array:

```csharp
using System;
using System.Windows;
using System.Windows.Media;

public class ColorArrayVisualizer
{
    // The 'Draw' method that accepts a DrawingContext
    public void Draw(DrawingContext drawingContext)
    {
        // Define an array of colors
        Color[] colors = new Color[]
        {
            Colors.Red,
            Colors.Green,
            Colors.Blue,
            Colors.Yellow,
            Colors.Violet
        };

        // The initial position and size for the rectangles
        double x = 10.0;
        double y = 10.0;
        double width = 50.0;
        double height = 50.0;

        // Draw each color as a rectangle on the canvas
        foreach (Color color in colors)
        {
            // Create a SolidColorBrush with the current color from the array
            SolidColorBrush brush = new SolidColorBrush(color);

            // Draw the rectangle with the solid color brush
            drawingContext.DrawRectangle(brush, null, new Rect(x, y, width, height));

            // Move the position of the next rectangle to the right
            x += width + 10; // add a small margin of 10 units
        }
    }
}
```

When this class is instantiated, and its `Draw` method is called with a proper `DrawingContext`, it will visually represent an array of colors by drawing a series of rectangles. Each rectangle will be filled with the corresponding color from the array.

The visual output will be a line of colored squares in red, green, blue, yellow, and violet, each positioned next to the other.