Certainly! To demonstrate trigonometric functions, we will create a visual representation of a sine wave, which is a fundamental concept in trigonometry. The sine wave is a smooth, periodic oscillation that is typically used to represent a repeating cycles like the motion of a pendulum or the waves of the sea.

Here's a C# class `SineWaveDrawer` that uses a `DrawingContext` to draw a sine wave. The `Draw` function will draw the wave on the provided canvas.

```csharp
using System;
using System.Windows;
using System.Windows.Media;

public class SineWaveDrawer
{
    public SineWaveDrawer()
    {
        // Parameterless constructor allows initialization if needed
    }

    public void Draw(DrawingContext dc)
    {
        if (dc == null)
            throw new ArgumentNullException(nameof(dc));

        // Prepare some drawing parameters
        Pen sineWavePen = new Pen(Brushes.Blue, 2);   // Defines the pen for the sine wave
        double amplitude = 50;                         // The height of the wave
        double frequency = 1;                          // How many waves in the drawing
        double phase = 0;                              // Starting phase of the wave
        double step = 1;                               // How much to increment x for the drawing
        Point startPoint = new Point(0, 100);          // Starting point of the first wave peak

        // Start a figure on the DrawingContext
        var sineWaveGeometry = new StreamGeometry();

        using (StreamGeometryContext ctx = sineWaveGeometry.Open())
        {
            ctx.BeginFigure(startPoint, false, false);
        
            // Draw the sine wave using a series of lines
            for (double x = 0; x <= 360; x += step)
            {
                double radians = (Math.PI / 180) * x; // Convert degrees to radians
                double y = amplitude * Math.Sin(frequency * radians + phase);

                // Set point for the wave
                Point sinePoint = new Point(x, startPoint.Y + y);
                ctx.LineTo(sinePoint, true, false);
            }
        }

        // Draw the sine wave on the canvas
        dc.DrawGeometry(null, sineWavePen, sineWaveGeometry);
    }
}
```

This class creates a blue sine wave starting from the left of the screen and progressing to the right. The `amplitude` variable controls the height of the wave, the `frequency` variable controls how many waves are drawn, and the `phase` variable allows you to adjust the starting point of the wave on the y-axis. The wave is drawn using `StreamGeometry` for efficiency.

The `Draw` function loops 360 times (representing degrees in a circle), converts the current degree value `x` to radians, then computes the sine value to determine the y-coordinate for each point on the wave. Each y-coordinate is then offset by the `startPoint.Y` value to move the wave down from the very top of the `DrawingContext`. 

Trigonometry is widely used in programming for animations, simulations, and any application that involves waves, rotations, or periodic movements. Understanding how to apply trigonometry functions like `Math.Sin` is fundamental for creating such effects.