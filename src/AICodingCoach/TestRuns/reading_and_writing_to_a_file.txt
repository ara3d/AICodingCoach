Since the task is to provide a visual example of reading and writing to a file, let's create a C# class that represents a simple notepad. We'll draw a representation of a text file being edited and saved. Please note that the actual file reading and writing won't be visually represented but will be part of the explanation and code comments.

To simplify, we won't handle exceptions or user input for this example. Instead, we'll simulate adding a new line of text to a file and display the content on the screen as if it were a text editor. Here's our visual C# class to demonstrate file operations:

```csharp
using System;
using System.IO;
using System.Windows;
using System.Windows.Media;

public class SimpleNotepad
{
    private string filePath;
    private string[] fileContent;

    public SimpleNotepad()
    {
        // Initialize the notepad by creating a temporary file
        filePath = Path.GetTempFileName();
        
        // Write initial content to the file
        File.WriteAllLines(filePath, new string[] { "Hello, World!", "This is a simple file." });
        UpdateFileContent();
    }

    private void UpdateFileContent()
    {
        // Read content from the file for display
        fileContent = File.ReadAllLines(filePath);
    }

    private void AddLineToFile(string line)
    {
        // Append a new line of text to the file
        using (StreamWriter sw = File.AppendText(filePath))
        {
            sw.WriteLine(line);
        }
        
        // Update in-memory file content
        UpdateFileContent();
    }

    public void Draw(DrawingContext context)
    {
        // Visual representation of the file content
        FormattedText formattedText = new FormattedText(
            string.Join(Environment.NewLine, fileContent),
            System.Globalization.CultureInfo.InvariantCulture,
            FlowDirection.LeftToRight,
            new Typeface("Consolas"),
            14,
            Brushes.Black,
            new NumberSubstitution(),
            VisualTreeHelper.GetDpi(new DependencyObject()).PixelsPerDip
        );

        // Draw the text on the screen as if it were a text editor
        context.DrawText(formattedText, new Point(10, 10));
        
        // Simulate adding a new line to the file after displaying the content
        AddLineToFile($"New line added at {DateTime.Now}");
    }
}
```

Here's what happens in this class:

- The constructor creates a temporary file and writes some initial content to it. The `UpdateFileContent` method fetches the text so it can be displayed.
- The `AddLineToFile` method appends a new line to the file and updates the in-memory content to reflect that.
- The `Draw` method creates a `FormattedText` object to display the content of the file visually and executes `AddLineToFile` to simulate editing the file.

Remember that this example simulates editing on every call to the `Draw` method; in a real application, updates would typically happen in response to user input. Additionally, exception handling and user interface considerations are omitted for simplicity, but they are important aspects of a robust real-world application.