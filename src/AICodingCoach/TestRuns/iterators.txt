Here's a simple C# class example that uses an iterator to create a visual pattern. Iterators in C# are a way to traverse through collections like arrays, lists, or any collection that implements the IEnumerable interface. The `yield return` statement is used to return each element one at a time.

In this example, weâ€™ll create a pattern of circles across the screen that demonstrates the concept of iteration visually by using an iterator to generate positions for each circle.

```csharp
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Media;

public class CirclePattern
{
    private const int CircleRadius = 20;
    private const int Spacing = 50;
    private const int NumberOfCircles = 5; // Change this to have more or fewer circles

    public CirclePattern()
    {
        // This is the parameterless constructor.
    }

    public void Draw(DrawingContext drawingContext)
    {
        if (drawingContext == null)
        {
            throw new ArgumentNullException(nameof(drawingContext));
        }

        foreach (Point point in GenerateCirclePositions(NumberOfCircles))
        {
            DrawCircle(drawingContext, point, CircleRadius);
        }
    }

    private void DrawCircle(DrawingContext context, Point center, double radius)
    {
        // Create a brush
        SolidColorBrush brush = new SolidColorBrush(Colors.Blue);

        // Create a pen
        Pen pen = new Pen(new SolidColorBrush(Colors.Black), 2);

        // Draw the circle
        context.DrawEllipse(brush, pen, center, radius, radius);
    }

    // This is the iterator that generates the positions for our circles
    private IEnumerable<Point> GenerateCirclePositions(int number)
    {
        for (int i = 0; i < number; i++)
        {
            // The 'yield return' statement returns each point one by one
            yield return new Point(Spacing + i * Spacing, Spacing);
        }
        // When the loop finishes, the iterator also finishes.
    }
}
```

Let me explain what this code does:

1. We have a class called `CirclePattern` with constants to define the circle radius, spacing between the circles, and the number of circles we want to draw.
2. The `Draw` method is what gets called with the `DrawingContext` provided from outside.
3. Within the `Draw` method, we loop over each `Point` generated by the `GenerateCirclePositions` method using a `foreach` loop.
4. For each point, we call `DrawCircle` to draw an individual circle on the drawing context.
5. The `GenerateCirclePositions` method is an iterator that uses the `yield return` syntax to generate a sequence of points where each circle should be drawn.

This example shows how iterators can be used to generate a sequence of data one piece at a time, which can be particularly useful for creating sequences that are not stored in memory all at once, such as generating a pattern on the fly for drawing onto a graphics context.