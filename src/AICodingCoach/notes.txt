Done:
* System now compiles code.
* I get text complete and I get 
* Replaced RoslynPad 
* Interface with AI looks like a chat. 
* Formatted ChatGPT output better
* Made code have a different font
* Add a "copy" button for code. 
* Make the scroll bars visible on the code.
* "return" key in prompt now 
* System prompt is read from a file
* Animation works 
* Fixed a number of threading issues. 
* Added an icon
* Scrolls new messages into view. 
* Added folders for models, services, views, and view-models.
* Fixed more threading issues. 
* Improved prompt. 
* Diagnostics are now above the canvas (as big as required)
* Adding Ara3D utility for synchronizing work. 
* Refactoring the Domo system. 
* Adding settings file 
* Adding application folders data
* Adding a main service  
* Replaced the command class with something from 
* Fixed a problem in reading the prompt file
* No longer using placeholder text in the chat.
* Added a context menu to code editor (cut, copy, paste, undo, redo, explain)
* Added support for detailed and succinct explanations
* Fixed bug with JSON deserialization of readonly properties
* Improved the prompt. 
* Renaming view models and controllers so they make more sense. 
* Setting up initial repositories 
* Started using view models and services
* Fixed some event-handler leaks in Chat message view models (others still remain). 
* Adding a project service for better handling the message splitting 
* Added some tests
* Significantly improved the splitting algorithm (still some blank messages show)
* Added predefined prompts as context for faster testing and demos. 
* Fixed messages showing up out of order. 
* Fixed binding problem that showed up.
* Auto-saves project data: code, chat-history, and name
* Repaired the Copy button
* Hiding the tabs
* Probably binds to the code in the project model
* Added an idle service.
* Fixed issue with order of messages 
* Disabled animation 

Today:
* Create a video 
* Create some example 

//==

Very High:
* Load the API-key from a user specified folder. 
* Save the project automatically, so I can see what the heck is going on. 
	* Maybe whenever a prompt is submitted? 
	* Or some code is run? 

High
* Improve the styling 
* workflow for accessing and reading from API key 
* workflow for authentication 
* Event scheduling on main thread
	* Find a cross-platform way to do this: using TaskScheduler? 
	* Need to test within the Domo app. 
* Settings file
	* Is there a settings service
* Command-prompt parser
* Referring to models across repositories.
* Data folder with built-in settings. 
* Define the structure of a workspace. 
* Put the Ara3D code in a nuget.
* If we submit twice, it will 

Medium:
* switching tabs, switches project
* switching projects, switches conversation 
* button to add a new project
* Try with Turbo 3.5 - see if I get similar results
* I am creating a new DLL every time someone writes some code. There must be a better way to do it.
* I should try using "Graphics" instead of Drawing Context 
* Figure out how to make a model's list field behave like an observable collection
* Figure out main menu
* Create commands for main workflow actions. 
	* Maybe all commands are always accessible from any view model 
* Organization of controls into a separate project 
* A special build for release . 
	* If you get the code from Github, it compiles differently.
	* So this implies a production build that is different 
	* A production build uses authentication. 
	* Every other build expects a key in a public space. 
* Put Ara3D code in public nuget 
* Move more utility code to Ara3D.Utils 
* Investigate Fine-tuning of model
* Move to Ara3D event bus, and add capability to use dispatcher for responding to events 
* Improve the cancel capabilities - no exceptions.
* Robust error handling 
* Logging - 
* Delete project
* Rename project 
* Clone project 
* Click on error, and it says explain the code. 
* Ability to select code and have it explained
* Put the system prompt in a folder that people can find. 
* Add a post-build step that copies files to where they should go
* Explain errors 
* Put back the menu. 
* Domo has a problem with events. It is easy to create a binding to an event in a view model. 
* When reading/writing a repository it needs to include the GUIDs.

Low
* Writes lots of exception handlers 
* Syntax coloring / formatting is not great.
* I can't figure out why certain words (like public) are bolded and others (like class) aren't. 
* Context menu for editor (cut/copy/paste)
* Personality drop-down 
* Ability to use replacement tags in a prompt {mycode}. 
* A set of tests 
* Log-in splash? 
* Change LLM 
* When something interesting happens, I want to save that work and move to it 
* A console app version
* A debuggable UI version of the app 
* Unload of assemblies (use an AppDomain)
* Editable settings.
* Improve the UI of the "copy button"
* Pull-down for predefined prompts 
* Some prompts in the menu. 
* Domo Models need some debugger support, they are hard to read and parse. 

Very Low 
* I want run, play, pause, restart, buttons 
* Make the scroll bars visible in the context
* I want the chat to spontaneously say things. 
* Make a UI that looks like a chat. 
* Come up with an icon for the user 
* Command to select and copy entire transcript 
* A "random" prompt. 
* Formatting of code text 
* Improved color scheme
* All styling in a separate project? 
* Improved Chrome 
* Bundle and share the workspace with others (via Github)
* Knowledge base
* Improve the "AssemblyInfo"
* Format inline code bits (suggests that I use RichText or Flow)
* Spontaneous hints 
* Prompt can explain the program 
* Maybe it is a special "About tab"
* Write a sonnet about how awesome of a programmer I am. 
* There isn async problem, 
Probably Not
* Being able to select part of the transcript, across messages. 
* Dark mode theme.
* Github integration on a workspace. 
* Talk to StackOverflow
* Projects have a "color" or "icon"


After
* An article on how I built this. 
* Optimize costs
	* Add some throttling so people don't abuse it.
	* Focus on pre-defined prompts. 
	* Maybe dynamically swap between models. 
	* Minimize the text created. 
* Document the architecture
* Make this easy to compile 

Notes and questions
* One solution: 
	* create a ViewModel library for Domo that properly implements IDispose 
		* It could contain some of the useful things like generating view models from models.
		* Perhaps we could also have an IViewModel? 
		* I kind of like this ... 
		* Then what about also having an IView? 
			* Maybe we can have better support for design-time data. 
			* Maybe even theming and other such things. 
			* And type-safe Data contexts? 
	* Another solution is to use EventBus for notifications. 
		* If I go down the route of having an EventBus embedded in Domo
		* It becomes less useful for other contexts. 
		* But it also becomes a more powerful library. 
* How well-known is the leaking event problem? 
* WHat I love about event bus, is that I can diagnose problems in one place. 
* I can also perform optimizations.
* If you subscribe to an event, you probably want to be an IDisposable 
	* So that you can unsubscribe, and not keep them around
* If you publish events, you may also want to implement IDisposable. 
	* So that you can detach all listeners, so that they can be deleted.
* Is there a way to better automate this safe event pattern? 
	* I could write something in a base class, I suppose. 
	* Easier if I have a "IDisposingNotifier". Which gets complicated. 
* Can't two way bind to message data. 

//==

* Explain X, using an example.
	* For loop
	* Pixels
	* Brush
	* Pen
	* Gradient 
	* Function
	* Recursion
	* Random numbers
	* Points 
	* DrawingContext
	* Class
	* Floating point
	* Variables
	* Constants 
	* Expressions 
	* Boolean
	* Logic 
	* If then
	* Sine
	* Cosine
	* Radians
	* RGB Colors
	* Gradients
* Create a shape
	* Star
	* House
	* Face
	* Dog
	* Sierpinski Triangle
	* Mandelbrot Set
	* Spirograph
	* Clock
	* Sine wave
	* 
* Draw an image in the style of:
	* Piet Mondrian
	* Wassily Kandinsky
	* Pablo Picasso
	* Jackson Pollock
	* Vincent Van Gogh
* Modify the previous example
	* To use more functions
	* To make it more interesting
	* To be simpler
	* To have more comments
	* To be shorter 
	* To work better
	* To be more efficient 
	* To eliminate errors 
	* To use fewer constants 
	* To Use implicitly typed variables 
	* To make it more reusable
	* To make it easier to read
	* To make it easier to understandd
	* To make it easier to change
* What 

* Menu
	* File 
		* Open
		* Save
		* Reset
		* Exit
	* View
		* Save Bitmap 
	* Edit 
		* Cut 
		* Copy 
		* Paste
		* Undo
		* Redo
		* Select all
	* Compiler
		* Run code again 
		* Copy errors 
	* Prompts
		* 
	* Help
		* Search the internet 
		* Where to get the source
		* Who wrote this program 
		* How to use the program
		* FAQ
			* What does "Submit" mean
			* What does "No classes." mean
			
Examples
* Fractals
* Polar functions
* Signed distance functions
* Spirograph

Ideas
* Ray trace

To-do:

* Save bitmaps and files. 
* Automate - 
	* Provide a prompt and save the bitmap and file 
* Load files 


// Recreating the joy division iconic cover. 

More ideas:

Exercises:

Variables and Data Types
Exercise 1: Draw different geometric shapes (circle, square, triangle) where each shape's size is determined by a variable.
Exercise 2: Create a color mixer where RGB values are controlled by variables.
Exercise 3: Draw a bar chart that visualizes simple numeric data stored in variables.

Control Structures (if-else, switch-case)
Exercise 1: Draw a traffic light signal where the light changes based on conditional logic.
Exercise 2: Create an interactive drawing where shapes change color or form based on user input.
Exercise 3: Draw a simple weather indicator (sunny, rainy, cloudy) based on different conditions.

Loops (for, while)
Exercise 1: Draw patterns using nested loops (like concentric circles or a grid of squares).
Exercise 2: Create an animated loop where a shape moves across the screen.
Exercise 3: Draw a spiral or fractal pattern using loops.

Arrays and Lists 
Exercise 1: Create a drawing that represents array elements as colored squares in a row.
Exercise 2: Draw a histogram or bar graph based on an array of numbers.
Exercise 3: Implement a simple image processing filter where each pixel's color is stored in an array.

Functions and Methods
Exercise 1: Draw a complex scene using custom functions for different elements (trees, houses, sun).
Exercise 2: Create a modular drawing app where functions are used for drawing different shapes.
Exercise 3: Implement a function that generates random colors for a dynamic drawing.

Object-Oriented Programming (OOP)
Exercise 1: Design a simple graphical game with objects representing players or obstacles.
Exercise 2: Create a drawing app where shapes are objects with properties and methods.
Exercise 3: Implement a bouncing ball simulation where each ball is an object with its own properties.

File Input/Output
Exercise 1: Load and display an image file.
Exercise 2: Create a program that saves drawn shapes into a file.
Exercise 3: Implement a drawing app that can load and save user drawings.

Basic Algorithms
Exercise 1: Implement a sorting visualization (like bubble sort or quick sort).
Exercise 2: Create a maze generator and solver.
Exercise 3: Develop a pattern matching game.

Data Structures (Stacks, Queues, Linked Lists)
Exercise 1: Visualize stack operations with graphical elements.
Exercise 2: Show queue operations in a dynamic drawing.
Exercise 3: Draw a linked list and demonstrate insertion and deletion.

Error Handling and Debugging
Exercise 1: Create a program that gracefully handles drawing errors (like trying to draw outside the canvas).
Exercise 2: Implement a debug mode in a drawing app that shows detailed error messages.
Exercise 3: Write a program with intentional bugs and practice debugging it.
User Interface Design

Exercise 1: Design a simple drawing application with a user-friendly interface.
Exercise 2: Create an interactive art piece where user input affects the drawing.
Exercise 3: Build a color palette selector tool for a drawing program.
Event Handling

Exercise 1: Implement a program where drawings change based on keyboard or mouse events.
Exercise 2: Create an interactive canvas where shapes are added or modified through user interaction.
Exercise 3: Develop a drawing tool that responds to various user inputs like mouse clicks and drags.
Recursion

Exercise 1: Draw recursive trees or fractals.
Exercise 2: Implement a recursive pattern generator.
Exercise 3: Create a recursive drawing function that produces complex, layered designs.
Web Development Basics (HTML/CSS/JavaScript)

Exercise 1: Build a simple web-based drawing tool using HTML canvas and JavaScript.
Exercise 2: Create an interactive web page where users can draw and submit their art.
Exercise 3: Develop a small website that showcases various drawing algorithms.
Version Control (like Git)

Exercise 1: Manage a collaborative drawing project using a version control system.
Exercise 2: Contribute to an open-source drawing tool and use version control for collaboration.
Exercise 3: Set up a version-controlled repository for storing and tracking changes in a personal drawing project.


Short-term:
* Rerun example button. 
* Save session button (or better yet, track it automatically)
* Mouse input (events?)
* Reset system prompt (restart conversation)

Long-term:
* Mouse handling
* Animation 

//==

Topics:
* Bitmap file 
* Colors 
* Vectors 
* Parametric functions
* Polar functions
* Linear Interpolation 
* Random numbers
* Sets 
* Dictionary 
* Prefix and postfix increment and decrement
* Noise 
* Brushes
* Trees 
* Fractal
* Binary search 
* Average
* Bit shifting
* Truth tables
* Static function
* Size 
* Point 
* Bytes 
* Types 
* Constants 

Drawing examples:
* Sierpinski Triangle
* Hilbert Curve
* Mandelbrot set
* Bar graph 
* Bezier curve
* Stacked graph
* Pie graph 
* Monkey Saddle plot
* Grid
* Maze 
* Star
* Flower
* Perlin noise 
* Cloud 
* Particles 
* Line rasterization
* Draw a circle from a series of points 
* Ring that is a wavy. 

//==

Explain the topic of {X} to me like I am a 12 year old who is new to programming
and provide a code example that demonstrates the concept visually.    

More topics:
* tuples
* color components 
* null 
* constructor 
* fields
* initialization 
* comments
* using statements
* public and private

//==

Basic Algorithms:
* Linear interpolation
* Drawing a polygon
* Rotating a square 
* Sorting a list 
* Counting items that satisfy a criteria 
* Tracking the mouse movement 
* 
